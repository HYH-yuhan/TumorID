# -*- coding: utf-8 -*-
"""
@author  : HYH
@E-mail  : huyuhan28@163.com
@className : cal_P_g_H
@describe  : TODO calculate  f(Hd) 、f(Hp) of Genotype combinations at specific locus,the result is in list format and Logged in logging file,
             TODO considering mutation rate

"""

import OSprocess
import logging
import  info_read
import G_read
import numpy as np


def get_genocom_ls(fileobi,locus):
    '''
    :param fileobi:  path ,genotype combination file is located
    :param locus: locus ,str
    :return:  genotype combination list of this locus ,  Two-dimensional List
    '''
    fileob  = fileobi + locus +'.txt'
    genocom_ls = OSprocess.openFile(fileob,'\t')
    return genocom_ls

def get_allele_ls(profile , locus):
    '''

    :param profile: the adjusted dictionary , generated by G_read_allePH
    :param locus:  locus ,str
    :return: allele list ,not including 'Q' ,list(str)
    '''
    locus_allele =  list(profile[locus].keys())
    return list(map(str,locus_allele))

def get_allele_ls_Q(profile , locus):
    '''

    :param profile: the adjusted dictionary , generated by G_read_allePH
    :param locus:  locus ,str
    :return: allele list ,including 'Q' ,list(str)

    '''
    locus_allele = get_allele_ls(profile , locus)
    locus_allele.append('Q')
    return locus_allele

def get_allele_ls_99(profile , locus):
    '''

    :param profile: the adjusted dictionary , generated by G_read_allePH
    :param locus: locus ,str
    :return: allele list , transfer 'Q' to 99 for ease of subsequent operation ,list(float)

    '''
    locus_allele = list(profile[locus].keys())
    locus_allele_float = list(map(float, locus_allele))
    locus_allele_float.append(99.0)
    return locus_allele_float


def Q_fre(fre_df,profile,locus):
    '''

    :param profile:  the adjusted dictionary , generated by G_read_allePH
    :param locus: locus ,str
    :return:  The frequency of the Q allele corresponding to this locus ,float
    '''
    sum_fre_ls = []
    for i in get_allele_ls(profile,locus):
        sum_fre_ls.append(fre_df[locus][float(i)])
    sum_fre_num = sum(sum_fre_ls)
    return 1-sum_fre_num

def get_genocom_fre_ls(fre_df,profile,fileob,locus):
    '''

    :param fileob: path ,genotype combination file is located
    :param locus: locus，str
    :return:    each allele frequency under each genotype combination,Two-dimensional List
    '''
    genocom_fre_ls = []
    for info in get_genocom_ls(fileob, locus):
        fre_ls = []
        for alle in info:
            if alle == 'Q':
                Q_fre_num = Q_fre(fre_df,profile,locus)
                fre_ls.append(Q_fre_num)
            elif alle == 'P':
                fre_ls.append('P')
            else:
                if np.isnan(fre_df[locus][float(alle)]):
                    fre_ls.append(0.0021)                                       # 5/2*1175
                    logging.debug('presence of rare alleles')
                else:
                    fre_ls.append(fre_df[locus][float(alle)])
        genocom_fre_ls.append(fre_ls)
    return genocom_fre_ls

def get_G1com(out_path,locus,noc):
    '''

    :param out_path: path ,genotype combination file is located
    :param locus: locus，str
    :param noc: number of contributor ,int
    :return: genotype of contributor, Two-dimensional List(float)
    '''

    ls = get_genocom_ls(out_path, locus)
    print('genotype combination',ls)
    if noc == 2:
        # G_alle , list ,is the first two alleles of each genotype combination, i.e., the genotype of the first contributor      #  [8.0, 9.0]
        # G_com ,Two-dimensional List, is the list of all first contributor          #  [[8.0, 8.0], [8.0, 9.0], [9.0, 9.0],
        G1com = []
        G2com = []
        for info in ls :
            info= ['99' if i =='Q' else i for i in info ]
            info = ['88' if i == 'P' else i for i in info]
            G1_alle = [float(info[0]),float(info[1])]
            G2_alle = [float(info[2]),float(info[3])]

            G1com.append(G1_alle)
            G2com.append(G2_alle)
        return G1com ,G2com

    if noc == 3:
        G1com = []
        G2com = []
        G3com = []
        for info in ls:
            info = ['99' if i == 'Q' else i for i in info]
            info = ['88' if i == 'P' else i for i in info]
            G1_alle = [float(info[0]), float(info[1])]
            G2_alle = [float(info[2]), float(info[3])]
            G3_alle = [float(info[4]), float(info[5])]
            G1com.append(G1_alle)
            G2com.append(G2_alle)
            G3com.append(G3_alle)
        return G1com, G2com,G3com

    if noc == 4:
        G1com = []
        G2com = []
        G3com = []
        G4com = []
        for info in ls:
            info = ['99' if i == 'Q' else i for i in info]
            info = ['88' if i == 'P' else i for i in info]
            G1_alle = [float(info[0]), float(info[1])]
            G2_alle = [float(info[2]), float(info[3])]
            G3_alle = [float(info[4]), float(info[5])]
            G4_alle = [float(info[6]), float(info[7])]

            G1com.append(G1_alle)
            G2com.append(G2_alle)
            G3com.append(G3_alle)
            G4com.append(G4_alle)
        return G1com, G2com,G3com,G4com


def get_refls(sus_path,locus):
    '''

    :param sus_path: path ,reference profile (.txt ) is located
    :param locus: locus str
    :return: alleles list(float) at specific locus of reference profile
    '''
    ref_G = G_read.g_read(sus_path)
    ref1 = float(ref_G[locus]['Allele 1'])
    ref2 = float(ref_G[locus]['Allele 2'])
    refls = [ref1, ref2]
    return refls

def LenInterLs(gls,refls):
    '''

    :param gls: alleles list of the first contributor
    :param refls: alleles list of reference profile
    :return: number of intersection sets
    '''
    samels =set(gls).intersection(refls)
    num = len(samels)
    return num

def hd_g1Fgeno(out_path,locus,fre_df,profile,sus_path,noc):
    '''

    :param out_path: path ,genotype combination file is located
    :param locus: locus str
    :param fre_df: frequency dataframe
    :param profile: the adjusted dictionary , generated by G_read_allePH
    :param sus_path: path ,reference profile (.txt ) is located
    :return: Genotype frequencies of  the first contributor based on kinship,list
    '''

    kls = [ 1 , 0 , 0 ]    # under Hd, unrelated is [1,0,0] , PO is [0,1,0], FS is [0,0,1]

    hd_g1_fgeno = []   # Genotype frequencies of the first contributor under Hd

    g1_lscom = get_G1com(out_path,locus,noc)[0]
    refls = get_refls(sus_path,locus)

    for g1_ls in g1_lscom:

        if g1_ls[0] == 99 :
            pa = Q_fre(fre_df,profile,locus)
        else:
            pa = fre_df[locus][g1_ls[0]]
        if g1_ls[1] == 99 :
            pb = Q_fre(fre_df,profile,locus)
        else:
            pb = fre_df[locus][g1_ls[1]]

        ibd = LenInterLs(g1_ls,refls)

        if ibd == 2 :                                                # ab,ab
            i = 2 * pa * pb * kls[0] + (pa + pb ) / 2 * kls[1] + kls[2]
            print(1, '',i)

        elif ibd == 1 :
            if refls[0] == refls[1] :
                if g1_ls[0] == g1_ls[1]:                             #        aa, aa
                    i = pa ** 2 * kls[0] + pa * kls[1] + kls[2]
                    print(2, '', i)
                else:                                                 #     ab,aa
                    if list(set(g1_ls).intersection(refls))[0] == g1_ls[0]:
                        i = 2 * pa * pb * kls[0] + pb * kls[1]      #  ab,aa
                        print(3.1,'',i)
                    else:
                        i = 2 * pa * pb * kls[0] + pa * kls[1]     #  ab,bb
                        print(3.2, '', i)
            else:
                if g1_ls[0] == g1_ls[1]:                                #     aa,ab
                    i = pa **2 * kls[0] + pa / 2 * kls[1]
                    print(4, '', i)
                else:                                                   #     ab,ac
                    if list(set(g1_ls).intersection(refls))[0] == g1_ls[0]:
                        i = 2 * pa * pb * kls[0] + pb / 2 * kls[1]          #   ab,ac
                        print(5.1, '', i)
                    else:
                        i = 2 * pa * pb * kls[0] + pa / 2 * kls[1]          #   ab,bc
                        print(5.2, '', i)

        elif ibd == 0:
            if g1_ls[0] == g1_ls[1]:                                    #   aa,cd
                i = pa ** 2 * kls[0]
                print(6, '', i)
            else:                                                       # ab,cd
                i = 2 * pa * pb * kls[0]
                print(7, '', i)
        hd_g1_fgeno.append(i)
    return hd_g1_fgeno


def fai_geno(G1com, G2com, fai):
    '''

    :param G1com: genotype of the first contributor, Two-dimensional List(float)
    :param G2com: genotype of the other contributor, Two-dimensional List(float)
    :return: fai value between the G1 and G2, list
    '''
    fai_genols = []
    for g1_ls, g2_ls in zip(G1com, G2com):

        ibd = LenInterLs(g2_ls, g1_ls)

        if ibd == 2:  # ab,ab
            fai_geno = (1 - fai) * (1 - fai) + fai * fai
            print(1, '', fai_geno)

        elif ibd == 1:
            if (g1_ls[0] == g1_ls[1]) & (g2_ls[0] == g2_ls[1]):
                fai_geno = (1 - fai) * (1 - fai)
                print(2, '', fai_geno)

            elif (g1_ls[0] != g1_ls[1]) & (g2_ls[0] != g2_ls[1]):
                fai_geno = fai
                print(3, '', fai_geno)

            else:
                fai_geno = (1 - fai) * fai * 2
                print(4, '', fai_geno)

        elif ibd == 0:
            if (g1_ls[0] == g1_ls[1]) & (g2_ls[0] == g2_ls[1]):
                fai_geno = fai * fai
                print(5, '', fai_geno)

            else:  # ab,cd
                fai_geno = fai * fai * 2
                print(6, '', fai_geno)

        fai_genols.append(fai_geno)
    return fai_genols


def get_fai_ls(out_path, locus,fai, noc):
    '''

    :param out_path: path ,genotype combination file is located
    :param locus: locus ,str
    :param noc: number of contributors
    :return: fai list , also be the genotype frequencies under hp
    '''

    if noc == 2:
        G1com, G2com = get_G1com(out_path, locus, noc)
        fai_ls = fai_geno(G1com, G2com, fai)


    elif noc == 3:
        G1com, G2com, G3com = get_G1com(out_path, locus, noc)
        fai_ls1 = fai_geno(G1com, G2com, fai)
        fai_ls2 = fai_geno(G1com, G2com, fai)
        fai_ls = [x * y for x, y in zip(fai_ls1, fai_ls2)]


    elif noc == 4:
        G1com, G2com, G3com, G4com = get_G1com(out_path, locus, noc)
        fai_ls1 = fai_geno(G1com, G2com, fai)
        fai_ls2 = fai_geno(G1com, G2com, fai)
        fai_ls3 = fai_geno(G1com, G2com, fai)
        fai_ls = list(map(lambda a, b, c: a * b * c, fai_ls1, fai_ls2, fai_ls3))
    return fai_ls



def g_hd_ls(profile,fre_df,fai,locus,out_path,sus_path,noc):
    '''
    :return: The frequency of genotype combinations under hd at this locus , list
    '''

    Fgenols = hd_g1Fgeno(out_path,locus,fre_df,profile,sus_path,noc)
    fai_ls =  get_fai_ls(out_path,locus,fai,noc)
    g_Hd_ls = [x*y for x,y in zip(Fgenols,fai_ls)]

    return g_Hd_ls

def g_hp_ls(out_path,locus,fai,noc):
    '''
    :return: The frequency of genotype combinations under hp at this locus , list
    '''
    g_Hp_ls = get_fai_ls(out_path,locus,fai,noc)
    return g_Hp_ls

def p_g_h(out_path,fre_path,profile,locus,fai,sus_path,noc):

    logging.debug(locus)

    # Obtain genotype combinations
    genocom_ls = get_genocom_ls(out_path, locus)
    logging.debug('genotype combinations : ')
    logging.debug(genocom_ls)

    #  Obtain allele list
    locus_allele_ls = get_allele_ls(profile,locus)
    logging.debug('allele : {} '.format(locus_allele_ls))

    #  Obtain frequency dataframe
    fre_df = info_read.read_all_fre(fre_path)

    #  For preview only, the frequency corresponding to each allele
    genofre_ls = get_genocom_fre_ls(fre_df,profile,out_path,locus)
    logging.debug('the frequency list corresponding to each allele :')
    logging.debug(genofre_ls)

    #  Calculation of genotype combination frequency for each genotype combination under Hd
    locus_g_hd_ls = g_hd_ls(profile,fre_df,fai,locus,out_path,sus_path,noc)
    logging.debug('genotype combination frequency under Hd: ')
    logging.debug(locus_g_hd_ls)

    #  Calculation of genotype combination frequency for each genotype combination under Hp
    locus_g_hp_ls = g_hp_ls(out_path,locus,fai,noc)
    logging.debug('genotype combination frequency under Hp:')
    logging.debug(locus_g_hp_ls)

    return locus_g_hp_ls , locus_g_hd_ls


