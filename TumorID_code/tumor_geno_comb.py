# -*- coding: utf-8 -*-
"""
@author  : HYH
@E-mail  : huyuhan28@163.com
@className : tumor_geno_comb
@describe  : TODO  Generate genotype combinations of each locus  and  put it in a temporary folder
"""


from itertools import combinations_with_replacement
from itertools import product
import operator
from functools import reduce
import logging
import numpy as np


def locus_geno_comb(allele_ls,noc,path,locus):
    '''

    :param allele_ls:  alleles + 'Q', considering ADO ,eg.['8','9','12','Q'] ,list
    :param noc: number of contributor , int
    :param path: path to store each locus combination file(.txt)
    :param locus: locus , str
    :return:  genotype combination list of one locus , eg. [[8.0,8.0,9.0,12.0],[8.0,9.0,8.0,12.0]...] Two-dimensional List
    '''


    genotype_list = list(combinations_with_replacement(allele_ls, 2))  # Generate genotypes
    genotype_comb_list = list(product(genotype_list, repeat=noc))      # Generate genotype combinations
    #print('all list ',genotype_comb_list)

    #  Each combination is determined whether it contains all alleles, including Q
    genotype_all_allele = []


    for ls in genotype_comb_list:

        flatten_ls = reduce(operator.add, ls)

        set_ls = set(list(flatten_ls))
        allele_ls = set(allele_ls)
        residual_ls = list(allele_ls.difference(set_ls))


        if residual_ls == [] or residual_ls == ['Q']:
            genotype_all_allele.append(ls)


    f_out_ls = []
    if noc == 2:
        for ls in genotype_all_allele:
            flatten_ls = list(reduce(operator.add, ls))
            if flatten_ls[2] != 'Q' or flatten_ls[3] != 'Q':
                # LOH of tumor allele , change to 'P' ; Loss of heterozygosity involve deletions of only one of the alleles
                for i in range(2, 4):
                    if flatten_ls[i] == 'Q':
                        flatten_ls[i] = 'P'
                f_out_ls.append(flatten_ls)
                logging.debug(flatten_ls)

    if noc == 3:
        for ls in genotype_all_allele:
            flatten_ls = list(reduce(operator.add, ls))
            if flatten_ls[2] == 'Q' and flatten_ls[3] == 'Q':
                continue
            elif flatten_ls[4] == 'Q' and flatten_ls[5] == 'Q':
                continue
            else:
                for i in range(2, 6):
                    if flatten_ls[i] == 'Q':
                        flatten_ls[i] = 'P'
                f_out_ls.append(flatten_ls)
                logging.debug(flatten_ls)

    if noc == 4:
        for ls in genotype_all_allele:
            flatten_ls = list(reduce(operator.add, ls))
            if flatten_ls[2] == 'Q' and flatten_ls[3] == 'Q':
                continue
            elif flatten_ls[4] == 'Q' and flatten_ls[5] == 'Q':
                continue
            elif flatten_ls[6] == 'Q' and flatten_ls[7] == 'Q':
                continue
            else:
                for i in range(2, 8):
                    if flatten_ls[i] == 'Q':
                        flatten_ls[i] = 'P'
                f_out_ls.append(flatten_ls)
                logging.debug(flatten_ls)


    #   Output to file (.txt)
    outpath = str(path+'%s.txt' % (locus))
    np.savetxt(outpath,f_out_ls,fmt='%s',delimiter='\t')


def profile_geno_comb(noc,out_path,profile) :
    '''

    :param noc:  number of contributors
    :param out_path: path to store each locus genotype combination file(.txt)
    :param profile:  the adjusted dictionary , generated by G_read_allePH
    :return:  each locus file containing genotype combination list
    '''

    print('profile',profile)

    loci_ls = list(profile.keys())   # loci list
    logging.debug('List of all loci : {}'.format(loci_ls))

    print('locils',loci_ls)

    for locus in loci_ls:
        locus_allele = (list(profile[locus].keys()))  # alleles list
        locus_allele = list(map(str, locus_allele))
        allele_ls = locus_allele + ['Q']   # alleles + 'Q', considering ADO
        print(allele_ls)

        logging.debug(locus + 'List of alleles to be assembled')
        logging.debug(allele_ls)

        locus_geno_comb(allele_ls, noc, out_path, locus)
        print(locus+'genotype combination completed')

    print('Each loci combination is completed .')


